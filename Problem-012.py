import math
import factorize as f


class Problem_012(object):
    """
    The sequence of triangle numbers is generated by adding the natural
            numbers. So the 7th triangle number would be

            1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.

    The first ten terms would be:

            1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

    Let us list the factors of the first seven triangle numbers:

            1: 1
            3: 1,3
            6: 1,2,3,6
            10: 1,2,5,10
            15: 1,3,5,15
            21: 1,3,7,21
            28: 1,2,4,7,14,28

    We can see that 28 is the first triangle number to have over five divisors.

    What is the value of the first triangle number to have over five hundred divisors?
    """

    def triangle_number_having_more_factors_than(self, number_of_factors):
        m = 0
        factors = []
        for e in range(100000):
            m = sum(range(e))
            factors = f.Factorize.get_all_factor_pairs_of(m)
            if len(factors) > number_of_factors:
                return m


if __name__ == "__main__":
    import sys
    solver = Problem_012()
    arg = sys.argv[1]
    print("The largest product of four adjacent numbers is {}.".format(
        solver.triangle_number_having_more_factors_than(arg)))
