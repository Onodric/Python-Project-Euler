import math
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
# The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?

# 1 find a triangle number
# 2 factor it use the sieve
# 3 when factors > 500 return the number
	# note: we can use the sieve, use >=!
def factors(n): # find the factor pairs of a number n
	facts = []
	for e in range(1, int(math.sqrt(n)+1)):
		if n % e == 0:
			facts.append(e) # adds the factor
			facts.append(n/e) # adds its pair!
	return facts # returns an unsorted list of factors

def triFactor(numFactors):
	m = 0
	triFacts = []
	for e in range(100000):
		m = sum(range(e))
		# print m
		triFacts = factors(m)
		print m, len(triFacts)
		if len(triFacts) > numFactors:
			return triFacts[0] * triFacts[1]

a = factors(8)
print a

print triFactor(500)