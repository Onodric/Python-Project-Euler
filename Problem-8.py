# The four adjacent digits in the 1000-digit number that have the greatest product are 9 x 9 x 8 x 9 = 5832.

# 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450

# Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

# the way to do this is the box method: use a thirteen character box than slides around!
# def process_madlib(madlib):
# 	processed = ""
# 	index = 0
# 	box_length = 4
# 	while index < len(madlib):
# 		frame = madlib[index:index+box_length]
# 		to_add = word_transformer(frame)
# 		processed += to_add
# 		if len(to_add) == 1:
# 			index += 1
# 		else:
# 			index += 4
# 	return processed

# import sys
# print sys.maxsize

def multiply(mmmmmmmmmmmmm): # where mm is the string to multiply
	x = 1
	for i in range(len(mmmmmmmmmmmmm)):
		x = x * int(mmmmmmmmmmmmm[i])
	return x

print multiply('12345')

def find_product(nn):	# where nn is the length of the "window"
	prod = 0
	index = 0
	box_length = nn
	long_number = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450"
	while index < len(long_number):
		frame = long_number[index:index+box_length]
		if multiply(frame) > prod:
			prod = multiply(frame)
		index += 1
		print frame
	return prod

print find_product(13)
