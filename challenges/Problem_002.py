class Problem_002:
    """Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

    1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

    By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
    """

    def fibbonacci_sum_of_multiples(self, limit, divisor):
        """Finds the sum of Fibonacci numbers which are multiples of a number

        Args:
            limit (integer): the maximum value to search
            divisor (integer): the number whose multiples are summed
        Returns:
            sum (integer): sum of all fibonacci numbers less than `limit`, divisible by `divisor`
        """

        if not limit or not divisor:
            return 0
        sum = 0
        fibbi_dig_1 = 1
        fibbi_dig_2 = 1
        place_holder = 0
        while fibbi_dig_2 < limit:
            if fibbi_dig_2 % divisor == 0:
                sum += fibbi_dig_2
            place_holder = fibbi_dig_2
            fibbi_dig_2 = fibbi_dig_1 + fibbi_dig_2
            fibbi_dig_1 = place_holder
        return sum


if __name__ == "__main__":
    import sys
    solver = Problem_002()
    print(solver.fibbonacci_sum_of_multiples(
        int(sys.argv[1]), int(sys.argv[2])))
